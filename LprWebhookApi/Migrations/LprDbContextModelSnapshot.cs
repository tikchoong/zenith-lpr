// <auto-generated />
using System;
using System.Text.Json;
using LprWebhookApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LprWebhookApi.Migrations
{
    [DbContext(typeof(LprDbContext))]
    partial class LprDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LprWebhookApi.Models.Entities.CommandQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<JsonDocument>("CommandData")
                        .HasColumnType("jsonb")
                        .HasColumnName("command_data");

                    b.Property<string>("CommandType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("command_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_processed");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_at");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SiteId");

                    b.ToTable("command_queue");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("device_name");

                    b.Property<string>("FirmwareVersion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firmware_version");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean")
                        .HasColumnName("is_online");

                    b.Property<DateTime?>("LastHeartbeat")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_heartbeat");

                    b.Property<string>("LocationDescription")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("location_description");

                    b.Property<int?>("Port")
                        .HasColumnType("integer")
                        .HasColumnName("port");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("serial_number");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SiteId", "SerialNumber")
                        .IsUnique();

                    b.ToTable("devices");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.DeviceHeartbeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChannelNum")
                        .HasColumnType("integer")
                        .HasColumnName("channel_num");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<string>("HeartbeatType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("heartbeat_type");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("password");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_at");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SiteId");

                    b.ToTable("device_heartbeats");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.EntryLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Confidence")
                        .HasColumnType("integer")
                        .HasColumnName("confidence");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("duration_minutes");

                    b.Property<string>("EntryStatus")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("entry_status");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entry_time");

                    b.Property<string>("EntryType")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("entry_type");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("exit_time");

                    b.Property<bool>("GateOpened")
                        .HasColumnType("boolean")
                        .HasColumnName("gate_opened");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("license_plate");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int?>("PlateRecognitionId")
                        .HasColumnType("integer")
                        .HasColumnName("plate_recognition_id");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer")
                        .HasColumnName("staff_id");

                    b.Property<int?>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<int?>("WhitelistId")
                        .HasColumnType("integer")
                        .HasColumnName("whitelist_id");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("idx_entry_logs_device");

                    b.HasIndex("LicensePlate")
                        .HasDatabaseName("idx_entry_logs_plate");

                    b.HasIndex("PlateRecognitionId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("idx_entry_logs_tenant");

                    b.HasIndex("WhitelistId");

                    b.HasIndex("SiteId", "EntryTime")
                        .HasDatabaseName("idx_entry_logs_site_time");

                    b.ToTable("entry_logs");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.IoTriggerEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<int?>("Source")
                        .HasColumnType("integer")
                        .HasColumnName("source");

                    b.Property<DateTime>("TriggeredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("triggered_at");

                    b.Property<int?>("Value")
                        .HasColumnType("integer")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SiteId");

                    b.ToTable("io_trigger_events");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.PlateRecognitionResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CarBrand")
                        .HasColumnType("integer")
                        .HasColumnName("car_brand");

                    b.Property<JsonDocument>("CarLocation")
                        .HasColumnType("jsonb")
                        .HasColumnName("car_location");

                    b.Property<int?>("CarType")
                        .HasColumnType("integer")
                        .HasColumnName("car_type");

                    b.Property<int?>("CarYear")
                        .HasColumnType("integer")
                        .HasColumnName("car_year");

                    b.Property<int?>("ColorType")
                        .HasColumnType("integer")
                        .HasColumnName("color_type");

                    b.Property<int?>("Confidence")
                        .HasColumnType("integer")
                        .HasColumnName("confidence");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<int?>("Direction")
                        .HasColumnType("integer")
                        .HasColumnName("direction");

                    b.Property<string>("FeatureCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("feature_code");

                    b.Property<string>("ImageFileBase64")
                        .HasColumnType("text")
                        .HasColumnName("image_file_base64");

                    b.Property<int?>("ImageFileLength")
                        .HasColumnType("integer")
                        .HasColumnName("image_file_length");

                    b.Property<string>("ImageFragmentBase64")
                        .HasColumnType("text")
                        .HasColumnName("image_fragment_base64");

                    b.Property<int?>("ImageFragmentLength")
                        .HasColumnType("integer")
                        .HasColumnName("image_fragment_length");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("image_path");

                    b.Property<bool?>("IsFakePlate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_fake_plate");

                    b.Property<bool>("IsOffline")
                        .HasColumnType("boolean")
                        .HasColumnName("is_offline");

                    b.Property<string>("LicensePlate")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("license_plate");

                    b.Property<int?>("PlateDistance")
                        .HasColumnType("integer")
                        .HasColumnName("plate_distance");

                    b.Property<int>("PlateId")
                        .HasColumnType("integer")
                        .HasColumnName("plate_id");

                    b.Property<JsonDocument>("PlateLocation")
                        .HasColumnType("jsonb")
                        .HasColumnName("plate_location");

                    b.Property<int?>("PlateTrueWidth")
                        .HasColumnType("integer")
                        .HasColumnName("plate_true_width");

                    b.Property<int?>("PlateType")
                        .HasColumnType("integer")
                        .HasColumnName("plate_type");

                    b.Property<DateTime?>("RecognitionTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("recognition_timestamp");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<int?>("TimeUsed")
                        .HasColumnType("integer")
                        .HasColumnName("time_used");

                    b.Property<int?>("TriggerType")
                        .HasColumnType("integer")
                        .HasColumnName("trigger_type");

                    b.Property<int?>("Usec")
                        .HasColumnType("integer")
                        .HasColumnName("usec");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SiteId");

                    b.ToTable("plate_recognition_results");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.ResponseLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<int?>("ProcessingTimeMs")
                        .HasColumnType("integer")
                        .HasColumnName("processing_time_ms");

                    b.Property<JsonDocument>("RequestData")
                        .HasColumnType("jsonb")
                        .HasColumnName("request_data");

                    b.Property<string>("RequestType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("request_type");

                    b.Property<JsonDocument>("ResponseData")
                        .HasColumnType("jsonb")
                        .HasColumnName("response_data");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SiteId");

                    b.ToTable("response_logs");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.Screenshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CapturedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("captured_at");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<string>("ImageBase64")
                        .HasColumnType("text")
                        .HasColumnName("image_base64");

                    b.Property<int?>("ImageLength")
                        .HasColumnType("integer")
                        .HasColumnName("image_length");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<string>("TriggerSource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("trigger_source");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SiteId");

                    b.ToTable("screenshots");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.SerialDataLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DataBase64")
                        .HasColumnType("text")
                        .HasColumnName("data_base64");

                    b.Property<int?>("DataLength")
                        .HasColumnType("integer")
                        .HasColumnName("data_length");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_at");

                    b.Property<int?>("SerialChannel")
                        .HasColumnType("integer")
                        .HasColumnName("serial_channel");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SiteId");

                    b.ToTable("serial_data_logs");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("MaxDevices")
                        .HasColumnType("integer")
                        .HasColumnName("max_devices");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("SiteCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("site_code");

                    b.Property<string>("SiteManagerEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("site_manager_email");

                    b.Property<string>("SiteManagerName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("site_manager_name");

                    b.Property<string>("SiteManagerPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("site_manager_phone");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("site_name");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("timezone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SiteCode")
                        .IsUnique();

                    b.ToTable("sites");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.SiteConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfigKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("config_key");

                    b.Property<string>("ConfigValue")
                        .HasColumnType("text")
                        .HasColumnName("config_value");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("SiteId", "ConfigKey")
                        .IsUnique();

                    b.ToTable("site_configurations");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.SiteStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Department")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("department");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Position")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("position");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<string>("StaffCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("staff_code");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("staff_name");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.HasIndex("SiteId", "StaffCode")
                        .IsUnique();

                    b.ToTable("site_staff");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.SiteUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("SiteId", "Email")
                        .IsUnique();

                    b.ToTable("site_users");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("emergency_contact");

                    b.Property<string>("EmergencyPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("emergency_phone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateOnly?>("MoveInDate")
                        .HasColumnType("date")
                        .HasColumnName("move_in_date");

                    b.Property<DateOnly?>("MoveOutDate")
                        .HasColumnType("date")
                        .HasColumnName("move_out_date");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<string>("TenantCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tenant_code");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tenant_name");

                    b.Property<string>("UnitNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit_number");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SiteId", "TenantCode")
                        .IsUnique();

                    b.HasIndex("SiteId", "UnitNumber")
                        .IsUnique();

                    b.ToTable("tenants");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.Whitelist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.PrimitiveCollection<int[]>("AllowedDevices")
                        .HasColumnType("integer[]")
                        .HasColumnName("allowed_devices");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("integer")
                        .HasColumnName("approved_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<int>("CurrentEntries")
                        .HasColumnType("integer")
                        .HasColumnName("current_entries");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<DateTime?>("EnableTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("enable_time");

                    b.Property<string>("EntryType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("entry_type");

                    b.Property<DateTime?>("ExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiry_time");

                    b.Property<bool>("IsBlacklist")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blacklist");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean")
                        .HasColumnName("is_recurring");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("license_plate");

                    b.Property<int?>("MaxEntries")
                        .HasColumnType("integer")
                        .HasColumnName("max_entries");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<TimeOnly?>("RecurringEndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("recurring_end_time");

                    b.Property<string>("RecurringPattern")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("recurring_pattern");

                    b.Property<TimeOnly?>("RecurringStartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("recurring_start_time");

                    b.Property<int>("SiteId")
                        .HasColumnType("integer")
                        .HasColumnName("site_id");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer")
                        .HasColumnName("staff_id");

                    b.Property<int?>("TenantId")
                        .HasColumnType("integer")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VisitPurpose")
                        .HasColumnType("text")
                        .HasColumnName("visit_purpose");

                    b.Property<string>("VisitorCompany")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("visitor_company");

                    b.Property<string>("VisitorName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("visitor_name");

                    b.Property<string>("VisitorPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("visitor_phone");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeviceId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TenantId");

                    b.HasIndex("SiteId", "LicensePlate", "EntryType", "DeviceId")
                        .IsUnique();

                    b.ToTable("whitelists");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.CommandQueue", b =>
                {
                    b.HasOne("LprWebhookApi.Models.Entities.Device", "Device")
                        .WithMany("CommandQueue")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LprWebhookApi.Models.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.Device", b =>
                {
                    b.HasOne("LprWebhookApi.Models.Entities.Site", "Site")
                        .WithMany("Devices")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.DeviceHeartbeat", b =>
                {
                    b.HasOne("LprWebhookApi.Models.Entities.Device", "Device")
                        .WithMany("DeviceHeartbeats")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LprWebhookApi.Models.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.EntryLog", b =>
                {
                    b.HasOne("LprWebhookApi.Models.Entities.Device", "Device")
                        .WithMany("EntryLogs")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LprWebhookApi.Models.Entities.PlateRecognitionResult", "PlateRecognitionResult")
                        .WithMany("EntryLogs")
                        .HasForeignKey("PlateRecognitionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LprWebhookApi.Models.Entities.Site", "Site")
                        .WithMany("EntryLogs")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LprWebhookApi.Models.Entities.SiteStaff", "Staff")
                        .WithMany("EntryLogs")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LprWebhookApi.Models.Entities.Tenant", "Tenant")
                        .WithMany("EntryLogs")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LprWebhookApi.Models.Entities.Whitelist", "Whitelist")
                        .WithMany("EntryLogs")
                        .HasForeignKey("WhitelistId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Device");

                    b.Navigation("PlateRecognitionResult");

                    b.Navigation("Site");

                    b.Navigation("Staff");

                    b.Navigation("Tenant");

                    b.Navigation("Whitelist");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.IoTriggerEvent", b =>
                {
                    b.HasOne("LprWebhookApi.Models.Entities.Device", "Device")
                        .WithMany("IoTriggerEvents")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LprWebhookApi.Models.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.PlateRecognitionResult", b =>
                {
                    b.HasOne("LprWebhookApi.Models.Entities.Device", "Device")
                        .WithMany("PlateRecognitionResults")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LprWebhookApi.Models.Entities.Site", "Site")
                        .WithMany("PlateRecognitionResults")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.ResponseLog", b =>
                {
                    b.HasOne("LprWebhookApi.Models.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LprWebhookApi.Models.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.Screenshot", b =>
                {
                    b.HasOne("LprWebhookApi.Models.Entities.Device", "Device")
                        .WithMany("Screenshots")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LprWebhookApi.Models.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.SerialDataLog", b =>
                {
                    b.HasOne("LprWebhookApi.Models.Entities.Device", "Device")
                        .WithMany("SerialDataLogs")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LprWebhookApi.Models.Entities.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.SiteConfiguration", b =>
                {
                    b.HasOne("LprWebhookApi.Models.Entities.Site", "Site")
                        .WithMany("SiteConfigurations")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LprWebhookApi.Models.Entities.SiteUser", "UpdatedByUser")
                        .WithMany("UpdatedConfigurations")
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Site");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.SiteStaff", b =>
                {
                    b.HasOne("LprWebhookApi.Models.Entities.Site", "Site")
                        .WithMany("SiteStaff")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.SiteUser", b =>
                {
                    b.HasOne("LprWebhookApi.Models.Entities.Site", "Site")
                        .WithMany("SiteUsers")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.Tenant", b =>
                {
                    b.HasOne("LprWebhookApi.Models.Entities.Site", "Site")
                        .WithMany("Tenants")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.Whitelist", b =>
                {
                    b.HasOne("LprWebhookApi.Models.Entities.SiteUser", "ApprovedByUser")
                        .WithMany("ApprovedWhitelists")
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LprWebhookApi.Models.Entities.SiteUser", "CreatedByUser")
                        .WithMany("CreatedWhitelists")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LprWebhookApi.Models.Entities.Device", "Device")
                        .WithMany("Whitelists")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LprWebhookApi.Models.Entities.Site", "Site")
                        .WithMany("Whitelists")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LprWebhookApi.Models.Entities.SiteStaff", "Staff")
                        .WithMany("Whitelists")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LprWebhookApi.Models.Entities.Tenant", "Tenant")
                        .WithMany("Whitelists")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ApprovedByUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Device");

                    b.Navigation("Site");

                    b.Navigation("Staff");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.Device", b =>
                {
                    b.Navigation("CommandQueue");

                    b.Navigation("DeviceHeartbeats");

                    b.Navigation("EntryLogs");

                    b.Navigation("IoTriggerEvents");

                    b.Navigation("PlateRecognitionResults");

                    b.Navigation("Screenshots");

                    b.Navigation("SerialDataLogs");

                    b.Navigation("Whitelists");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.PlateRecognitionResult", b =>
                {
                    b.Navigation("EntryLogs");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.Site", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("EntryLogs");

                    b.Navigation("PlateRecognitionResults");

                    b.Navigation("SiteConfigurations");

                    b.Navigation("SiteStaff");

                    b.Navigation("SiteUsers");

                    b.Navigation("Tenants");

                    b.Navigation("Whitelists");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.SiteStaff", b =>
                {
                    b.Navigation("EntryLogs");

                    b.Navigation("Whitelists");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.SiteUser", b =>
                {
                    b.Navigation("ApprovedWhitelists");

                    b.Navigation("CreatedWhitelists");

                    b.Navigation("UpdatedConfigurations");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.Tenant", b =>
                {
                    b.Navigation("EntryLogs");

                    b.Navigation("Whitelists");
                });

            modelBuilder.Entity("LprWebhookApi.Models.Entities.Whitelist", b =>
                {
                    b.Navigation("EntryLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
